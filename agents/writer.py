"""
Writer Agent - Report Generation

Role: Action Layer
Responsibility: Transforms synthesized knowledge into final deliverables

Educational Concept:
The Writer Agent represents the 'action' component of Agentic AI.
After perception (search) and cognition (planning, summarizing), the system
must take action - in this case, producing a comprehensive research report.
"""

from typing import Dict, Any
from datetime import datetime


class WriterAgent:
    """
    Generates structured research reports in Markdown format.
    
    Agentic AI Principle: Goal-Oriented Action
    - Transforms internal knowledge into external outputs
    - Formats information for human consumption
    - Maintains professional standards in deliverables
    """
    
    def __init__(self, knowledge_graph=None):
        """
        Initialize the Writer Agent.
        
        Args:
            knowledge_graph: Reference to the knowledge graph for logging
        """
        self.knowledge_graph = knowledge_graph
        self.name = "WriterAgent"
    
    def write_report(self, query: str, summary: Dict[str, Any]) -> str:
        """
        Generate a comprehensive research report.
        
        Args:
            query: Original research query
            summary: Synthesized information from SummarizerAgent
            
        Returns:
            Markdown-formatted research report
            
        Educational Note:
        In production, this would use LLM-based generation (e.g., GroqCloud).
        The LLM would:
        - Structure information logically
        - Write in clear, professional prose
        - Add context and explanations
        - Format with proper headings, lists, and citations
        """
        self._log_action("writing_started", {"query": query})
        
        report = self._generate_markdown_report(query, summary)
        
        self._log_action("writing_completed", {
            "query": query,
            "report_length": len(report)
        })
        
        return report
    
    def _generate_markdown_report(self, query: str, summary: Dict[str, Any]) -> str:
        """
        Create structured Markdown report.
        
        Educational Note:
        This template-based approach demonstrates the structure.
        LLM-based generation would create more natural, context-aware content.
        """
        report_sections = []
        
        report_sections.append(f"# Research Report: {query}\n")
        report_sections.append(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        report_sections.append(f"**Sources Analyzed:** {summary.get('source_count', 0)}\n")
        report_sections.append("---\n")
        
        report_sections.append("## Executive Summary\n")
        report_sections.append(f"This report presents research findings on **{query}**. ")
        report_sections.append(f"Information was gathered from {summary.get('source_count', 0)} sources ")
        report_sections.append("and synthesized into key insights.\n")
        
        report_sections.append("## Key Findings\n")
        key_findings = summary.get("key_findings", [])
        if key_findings:
            for idx, finding in enumerate(key_findings[:8], 1):
                report_sections.append(f"\n### Finding {idx}: {finding.get('source', 'Unknown Source')}\n")
                report_sections.append(f"{finding.get('point', 'No information available')}\n")
                if finding.get('url'):
                    report_sections.append(f"\n*Source: [{finding.get('url')}]({finding.get('url')})*\n")
        else:
            report_sections.append("No key findings were extracted from the search results.\n")
        
        report_sections.append("## Sources\n")
        sources = summary.get("sources", [])
        if sources:
            for idx, source in enumerate(sources, 1):
                title = source.get('title', 'Unknown')
                url = source.get('url', '')
                report_sections.append(f"{idx}. [{title}]({url})\n")
        else:
            report_sections.append("No sources available.\n")
        
        report_sections.append("\n---\n")
        report_sections.append("*This report was generated by an Autonomous Research Agent for educational purposes.*\n")
        report_sections.append("*In production, this would use LLM-based generation (GroqCloud, GPT-4, etc.) for higher quality.*\n")
        
        return "".join(report_sections)
    
    def _log_action(self, action: str, data: Dict[str, Any]):
        """Log writing actions to knowledge graph."""
        if self.knowledge_graph:
            self.knowledge_graph.log_agent_action(
                agent=self.name,
                action=action,
                data=data,
                timestamp=datetime.now().isoformat()
            )
